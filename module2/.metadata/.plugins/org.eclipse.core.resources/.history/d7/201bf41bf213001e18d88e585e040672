package com.day6.session1.reflection;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

class CallMe {
	public String welcome(String name) {
		return "welcome " + name;
	}
}

public class CallingAMethodUsingJavaRef {

	public static void main(String[] args) throws ClassNotFoundException,
			NoSuchMethodException, SecurityException, InstantiationException,
			IllegalAccessException, IllegalArgumentException,
			InvocationTargetException {

		Class<?> clazz = Class.forName("com.day6.session1.reflection.CallMe");

		Method method = clazz.getDeclaredMethod("welcome", String.class);
		method.setAccessible(true); // Even it's a private method i can call
									// this

		CallMe callMe = (CallMe) clazz.newInstance();

		String output = (String) method.invoke(callMe, "Poorna");
		
		System.out.println(output);

		// CallMe ob=new CallMe();
		//
		// Method method = ob.getClass().getDeclaredMethod("welcome");
		// method.setAccessible(true);
		// method.invoke(ob, "raj");

		// System.out.println(op);

	}

}
