


Discussion day 2:
====================

//java oo basics: class , object , ctr: default parameteriszed, copy ctr
	//gettter setters
	//business logic methods
	//this keyword
	
	
	
step 1: create a class 
-----------------

class Employee{
	private int id;
	private String name;
	private double salary;
	
	public Employee(){
		System.out.println("it is a default ctr");
	}
	//what is the job of ctr? used to init initial values to instance variable
	public Employee(int myId, String myName, double mySalary){
		id=myId;
		name=myName;
		salary=mySalary;
	}
	
	public void printEmployee(){
		System.out.println("id : "+ id );
		System.out.println("name : "+ name );
		System.out.println("salary : "+ salary );
	}
}

	
//step 1: create a class to test the code
//-----------------

public class A_BasicsOfJavaClass {
	
	//java oo basics: class , object , ctr: default parameteriszed, copy ctr
	//gettter setters
	//business logic methods
	//this keyword
	public static void main(String[] args) {
		
		Employee e1=new Employee(2,"raj",67000);
		e1.printEmployee();
		
	}

}


---------------------------------------------

Demo: ctr, getter setter , coding convesion, this, autogen of method by ide

---------------------------------------------
class Employee{
	private int id;
	private String name;
	private double salary;
	
	//getter and setter (mutator?)
	
	public void setSalary(int salary){
		this.salary=salary;
	}
	
	public int getId() {
		return id;
	}

	public String getName() {
		return name;
	}

	public double getSalary() {
		return salary;
	}

	//default ctr
	public Employee(){
		this(1,"foo",90000);
		System.out.println("this is default ctr");
	}
	//para ... ctr
	//what is the job of ctr? used to init initial values to instance variable
	public Employee(int id, String name, double salary){
		//this();
		this.id=id;
		this.name=name;
		this.salary=salary;
	}
	
	//copy ctr: used to create the object with the help of state of another object
	public Employee(Employee e){
		this.id=e.id;
		this.name=e.name;
		this.salary=e.salary;
	}
	
	
	public void printEmployee(){
		System.out.println("id : "+ id );
		System.out.println("name : "+ name );
		System.out.println("salary : "+ salary );
	}
}
public class A_BasicsOfJavaClass {
	
	//java oo basics: class , object , ctr: default parameteriszed, copy ctr
	//gettter setters
	//business logic methods
	//this keyword
	public static void main(String[] args) {
		
		Employee e1=new Employee(2,"raj",67000);
		e1.printEmployee();
		
		e1.setSalary(100_000);
		
		e1.printEmployee();
		
		System.out.println(e1.getSalary());
		System.out.println(e1.getName());
		System.out.println(e1.getId());
		
		
	}

}

-------------------------------------------------------

coding convesion:
===========================
	* name of class must start with capital
	
	class Employee{
	
	
	}
	
	class FullTimeEmployee{
	
	
	}
	
	* convesion about data : instance/static/ local /final
	
	
	class Employee{
			private int employeeId;
			
			private String employeeName;
			
			private double employeeSalary;
			
			private static String companyName="XYZ";
			
			public final double INCREMENT_FACTOR=1.01;
			
			public void applyIncrementToTheEmployeeSalary(){
			
			
			}
	
	
	}
	
===================================================

What is the need of init block

consider:

-------------

//what is init block means initilization block
//DRY :dont repeat yourself?

class Foo{
	public Foo(){
		System.out.println("some code line 1");
		System.out.println("some code line 2");
		
		System.out.println("code for default ctr");
	}
	
	public Foo(int x){
		System.out.println("some code line 1");
		System.out.println("some code line 2");
		
		System.out.println("code for parameterized ctr");
	}
}
public class B_InitBlock {
	
	public static void main(String[] args) {
		
	}

}



hope u can find the repeated code:
sound bad:
----------------------------------
class Foo{
	//init block: common code for every ctr
	{
		System.out.println("some code line 1");
		System.out.println("some code line 2");
	}
	
	public Foo(){
		System.out.println("code for default ctr");
	}
	
	public Foo(int x){
		
		System.out.println("code for parameterized ctr");
	}
}

----------------------------------------------
what about something called static init block?
---------------------------------------------

class Foo{
	//init block: common code for every ctr
	private static double value;
	
	static{
		System.out.println("it is a static init block");
		//static init block called only once at the class loading time
		value=Math.PI*1;
	}
	
	{
		System.out.println("some code line 1");
		System.out.println("some code line 2");
	}
	
	public Foo(){
		System.out.println("code for default ctr");
	}
	
	public Foo(int x){
		
		System.out.println("code for parameterized ctr");
	}
}
------------------------------'
can i have more then one init block: YES!
-------------------------------------------

//java support only call by value not call by reference



u cant swap values like this : c/c++/java
============================================

public class A_CallByValue {
	
	public static void main(String[] args) {
		int i=1;
		int j=2;
		System.out.println("value of i: "+ i +" value of j: "+ j);
		swap(i, j);
		System.out.println("value of i: "+ i +" value of j: "+ j);
	}

	private static void swap(int i, int j) {
		int temp=i;
		i=j;
		j=temp;
	}
}

Java dont provide u pointer (internally it have it)
====================================================
class Value{
	private int v;

	public Value(int v){
		this.v=v;
	}
	public int getV() {
		return v;
	}

	public void setV(int v) {
		this.v = v;
	}
	
}

public class B_CallByValueEx2 {
	
	public static void main(String[] args) {
		Value v1=new Value(1);
		Value v2=new Value(2);
		
		System.out.println("value of v1: "+ v1.getV() +" value of v2: "+ v2.getV());
		swap(v1, v2);
		System.out.println("value of v1: "+ v1.getV() +" value of v2: "+ v2.getV());
	}

	private static void swap(Value i, Value j) {
		Value temp=i;
		i=j;
		j=temp;
	}
}


--------------------------------------------------------
Swapping of object even doent work!
-------------------------------------------------------

class Value{
	private int v;

	public Value(int v){
		this.v=v;
	}
	public int getV() {
		return v;
	}

	public void setV(int v) {
		this.v = v;
	}
	
}

public class B_CallByValueEx2 {
	
	public static void main(String[] args) {
		Value v1=new Value(1);
		Value v2=new Value(2);
		
		System.out.println("value of v1: "+ v1.getV() +" value of v2: "+ v2.getV());
		swap(v1, v2);
		System.out.println("value of v1: "+ v1.getV() +" value of v2: "+ v2.getV());
	}

	private static void swap(Value i, Value j) {
		Value temp=i;
		i=j;
		j=temp;
	}
}
-----------------------------------
public class CopyOfB_CallByValueEx3 {
	
	public static void main(String[] args) {
		Value value=new Value(5);
		//java says u cant swap 2 objects in java (trick: of array)
		//but u can change the state of object in a method call?
		System.out.println("value is : "+ value.getV());
		changeIt(value);
		System.out.println("value is : "+ value.getV());
	}

	private static void changeIt(Value x) {
		x.setV(x.getV()*2);
	}

}
------------------------------------------------------

What is the effect of final in method arguments?
--------------------------------------------------

public class CopyOfB_CallByValueEx3 {
	
	public static void main(String[] args) {
		Value value=new Value(5);
		//java says u cant swap 2 objects in java (trick: of array)
		//but u can change the state of object in a method call?
		System.out.println("value is : "+ value.getV());
		changeIt(value);
		System.out.println("value is : "+ value.getV());//NPE?
	}

	private static void changeIt(final Value x) {
//		x=new Value(100);// u are not allowed the change the ref
		x.setV(x.getV()*2);//but u are allowed to change the state of obj
		//that is pointed by the pointer (ref)
	}
}

=========================
What is the need of java packages?

used to orgainzed the code
used to enforce better encapsulation


Ex: of face rec system

Ex: how it force better encapsulation?

----------------------------------------

Practice:
1. create a package a.b

then put the code
--------------------
public class A {
	private int i=1;
	int m=30;
	protected int j=2;
	public int k=3;
	
	private void fooPrivate(){
		System.out.println("foo private method ");
	}
	
	 void fooDefault(){
		System.out.println("foo default method ");
	}
	
	protected void fooProtected(){
		System.out.println("foo protected method ");
	}
	
	public void fooPublic(){
		System.out.println("foo public method ");
	}
	
}


class A1{
}


---------
step 2: create a another package a.c


public class B extends A{

	public static void main(String[] args) {
		
		//What is the diff bw default and protected?
		//------------------------------------------------
		//the protected data/method of a public class of another package is 
		//is visible to my package iff we subclass that class
		
		//default data/method or class of other package CAN NOT be access in ANY WAY
		
		//Now u need to create the object of B rather then A
		
		B b=new B();
		System.out.println(b.j);//protected data
		System.out.println(b.k);//public data
		
		b.fooProtected();//protected
		b.fooPublic();// yes we can anyway call public method
		//A a1=new A();
//		System.out.println(a1.i);//private
//	
//		System.out.println(a1.m);//default
//		System.out.println(a1.j);//protected
		
		
//		
//		System.out.println(a1.k);//public : YES
//		
//		a1.fooPublic();//only public method is access directly
//		
		
		
	}
}

Step 3: now try to do expermentation of diff visiblity modifier
---------------------------------------------------------------------------
Break: 11-11:15 AM

---------------------
We start at 11:50AM
-------------------------------------
30min for trying all this stuff
----------------------------------
What next?
------------
relationship bw the objects
	3 kind of relationship bw the objects
	
		has a
		is a
		use a
IS-A
--------------

Employee

FullTimeEmployee

PartTimeEmployee


Inheritance , type of Inheritance
examples
multiple Inheritance not supported in java(using inteface)

function overloading
function overriding

run time polymporphism


abstract class
interface

							polymporphism
				
		compile time							run time poly
		--------------------------------------------------------
		
		1. function overloading				function overriding
		2. operator overloading
			explicit
			implicit
			
		3. generics class *





Simple inheritane examples:
-------------------------

	A
	
	|
	B



class A{
	private int i;
	
	public A(int i){
		this.i=i;
	}
	public void printMethod(){
		System.out.println("value of i: "+ i);
	}
}
class B extends A{
	private int j;
	
	public B(int i, int j){
		super(i);
		this.j=j;
	}
	public void printMethod(){
		super.printMethod();
		System.out.println("value of j: "+ j);
	}
}

public class A_Inheritance {
	
	public static void main(String[] args) {
		
		B b=new B(6,7);
		b.printMethod();
	}

}


Why mulitple Inheritance is not suppoted in java?
===============================================

	X     Y
	  
	  
	  Z
	  

class X{
	int i=5;
	void foo(){
		System.out.println("it is the foo method of class X");
	}
}

class Y{
	int i=50;
	void foo(){
		System.out.println("it is the foo method of class Y");
	}
}

class Z extends X,Y{
	void foo(){
		super.foo();//Which method of base class , which base class i should choose?
		System.out.println(i);//Which i?
	}
}

public class A1_MutipleInh {
	
	public static void main(String[] args) {
		
	}

}
------------------------------------------------


What is function overloading?
------------------------------
class Cal{
	
	public double add(int a, double b){
		System.out.println("public double add(int a, double b)");
		return a+b;
	}
	
	public double add(double a, int b){
		System.out.println("public double add(double a, int b)");
		return a+b;
	}
	
	
//	public int add(int a, int b,int c){
//		return a+b+c;
//	}
}
public class B_FunctionOverloading {
	
	public static void main(String[] args) {
		
		Cal c=new Cal();
		double value=c.add(2, 2.8);//as compiler know which method ur calling. ie ....
		System.out.println(value);
		
		
		
		
		
		
		
		
		
		
		//compile time 
		//Cal c=new Cal();
		//int value=c.add(2, 2,5);//as compiler know which method ur calling. ie ....
		//System.out.println(value);
		
		
		
	}

}



What is function overriding?
------------------------------
you can do run time polymorphism
iff u have function overriding
--------------------------------

//why overriding?
class KrishnaDairy{
	
	public void sellMilk(){
		System.out.println("selling normal milk");
	}
}
class KrishnaDairyImproved extends KrishnaDairy{
	
	@Override
	public void sellMilk(){
		System.out.println("selling pasteurized  milk");
	}
}

public class C_FuncationOverriding {
	
	public static void main(String[] args) {
		//overrding support run time polymorphism
		KrishnaDairy dairy=new KrishnaDairyImproved();
		dairy.sellMilk();//Compiler is clue less which method is going to be called
		//ie why it called run time poly... it is decided at run time which method is 
		//going to be called
	}
}
-----------------------------------
covarient return type:
--------------------------------

class NormalMilk{}

class PasteurizedMilk extends NormalMilk{}

class KrishnaDairy{
	//till java 1.4 it is need to have exactly same sign of method so that they can be overriden
	//java 1.5 : u can return a covarient return type
	
	public NormalMilk sellMilk(){
		System.out.println("selling normal milk");
		return new NormalMilk();
	}
}
class KrishnaDairyImproved extends KrishnaDairy{
	
	@Override
	public PasteurizedMilk sellMilk(){
		System.out.println("selling pasteurized  milk");
		return new PasteurizedMilk();
	}
}


public class C_FuncationOverriding {
	
	public static void main(String[] args) {
		//overrding support run time polymorphism
		KrishnaDairy dairy=new KrishnaDairyImproved();
		dairy.sellMilk();//Compiler is clue less which method is going to be called
		//ie why it called run time poly... it is decided at run time which method is 
		//going to be called
	}

}
-----------------------------------------------

how it provide code flexiblity?
---------------------------------------


//req: new to java pls listen my playlist

abstract class Shape{
	private String color;
	
	public Shape(String color) {
		this.color = color;
	}
	public abstract void getArea();
	
	public void printColor(){
		System.out.println("color : "+ color);
	}
}
class Triangle extends Shape{
	public Triangle(String color) {
		super(color);
	}
	@Override
	public void getArea() {
		System.out.println("area of tri: 0.5 X b X h");
	}
	
}
class Circle extends Shape{
	public Circle(String color) {
		super(color);
	}
	@Override
	public void getArea() {
		System.out.println("area of Circle: PI X r X r");
	}
}

class Square extends Shape{
	public Square(String color) {
		super(color);
	}
	@Override
	public void getArea() {
		System.out.println("area of Square: L X W");
	}
}



public class D_CodeFlexiblity {
	
	public static void main(String[] args) {
		//i can take choice for the user
		//1. circle
		//2. sq
		//3. triangle
		
		Shape shape=null;
		
		Scanner scanner=new Scanner(System.in);
		System.out.println("PE ur choice...1. Cir 2. Sq 3. Tri.");
		int choice= scanner.nextInt();
		if(choice==1)
			shape=new Circle("red");
		else if(choice==2)
			shape=new Square("red");
		else 
			shape=new Triangle("red");
		
		shape.getArea();//Which method is going to be called is decided at run time
		//ie why it is called run time polymorophism
		
	}

}
------------------------------------------------