
Day 7:
-----------

* introduction to java threads
* creating and running the threads
* thread life cycle basics
* synchronization 
* producer consumer problem
* volitle keywords
* dead lock
* problem with java threads api
* introduction to juc
* threads safe data structure
* introduction to thread pools
* difference kind of threads pools cpu vs io bound process



Hello world thread program:
=========================


//worker and job
-------------------------

//Thread is used to create the work
---------
//Runnale is used to creating job 
---------

//creating worker assign job to the worker
//threads methods: sleep, join etc

//create a job
class MyJob implements Runnable{

	@Override
	public void run() {
		System.out.println("thread is started : "+Thread.currentThread().getName() );
		try{
			Thread.sleep(1000);
		}catch(InterruptedException ex){
			ex.printStackTrace();
		}
		
		System.out.println("thread is finished : "+Thread.currentThread().getName() );
	}
	
}
public class A_DemoThread1_Using_Runnable {
	
	public static void main(String[] args) {

		System.out.println("i am in main threads: "+Thread.currentThread().getName());
		
		MyJob job=new MyJob();
		
		Thread thread=new Thread(job,"A");
		
		//thread.setPriority(Thread.MAX_PRIORITY-2);
		thread.start();
		
		
		System.out.println("main threads is finished: "+Thread.currentThread().getName());
	}

}


Note: never call run() method directly u should always call start() method and run is called by
thread scheudle (part of OS)

Threads to create the threads
threads===OS level threads


life cycle of threads
------------------------


							Block
							
							
new ---> runnable -----------------> running --------------------> dead


Note: threads are resouce hungry (CPU cycle)


Now we are starting 3 threads:
--------------------------
A B C

it is not gurentted the order of ex of threads


i am in main threads: main
main threads is finished: main
thread is started : B
thread is started : A
thread is started : C
thread is finished : C
thread is finished : B
thread is finished : A



i am in main threads: main
main threads is finished: main
thread is started : A
thread is started : B
thread is started : C
thread is finished : B
thread is finished : C
thread is finished : A



how to control it?


class MyJob implements Runnable{

	@Override
	public void run() {
		System.out.println("thread is started : "+Thread.currentThread().getName() );
		try{
			Thread.sleep(1000);
		}catch(InterruptedException ex){
			ex.printStackTrace();
		}
		
		System.out.println("thread is finished : "+Thread.currentThread().getName() );
	}
	
}
public class A_DemoThread1_Using_Runnable {
	
	public static void main(String[] args) {

		System.out.println("i am in main threads: "+Thread.currentThread().getName());
		
		MyJob job=new MyJob();
		
		Thread thread=new Thread(job,"A");
		Thread thread2=new Thread(job,"B");
		Thread thread3=new Thread(job,"C");
		
		//thread.setPriority(Thread.MAX_PRIORITY-2);
		thread.start();
		thread2.start();
		thread3.start();//order of calling start method dont matter, it depend on thread scheudler
		//not on programmer 
		
		
		System.out.println("main threads is finished: "+Thread.currentThread().getName());
	}

}




//how to ensure that main should finished at end?
=======================================================
//method called join() method can be used to achive that
		
		
		

//how to ensure that main should finished at end?
		//method called join() method can be used to achive that
		
		try{
			
			thread.join();//ie thread is saying to main thread join after me
			thread2.join();
			thread3.join(2000);//ie hey thread main only wait for my compition for just 2sec
			//otherwise u can finished
			
		}catch(InterruptedException ex){
			ex.printStackTrace();
		}
		
		
		

i am in main threads: main
thread is started : A
thread is started : B
thread is started : C
thread is finished : A
thread is finished : B
thread is finished : C
main threads is finished: main




Creating thread by extending Thread class
------------------------------------------

//problem u can not extend more then one class in java
//this way of creating thread is not very common

class MyThread extends Thread{
	 public MyThread(String name) {
		super(name);
	}
	@Override
	public void run(){
		System.out.println("thread is started : "+Thread.currentThread().getName() );
		try{
			Thread.sleep(1000);
		}catch(InterruptedException ex){
			ex.printStackTrace();
		}
		
		System.out.println("thread is finished : "+Thread.currentThread().getName() );
	}
}
public class B_DemoThread1_Using_Thread {

	public static void main(String[] args) {
	
		
		MyThread t1=new MyThread("foo");
		t1.start();
	}
}





Creating thread by using ann inner class
------------------------------------------

public class C_DemoThread1_Using_AnnInnerClass {

	public static void main(String[] args) {

		Runnable runnable=new Runnable() {
			
			@Override
			public void run() {
				System.out.println("thread is started : "+Thread.currentThread().getName() );
			}
		};
		
		Thread thread=new Thread(runnable,"A");
		thread.start();
		
	}
}




Creating thread by using lambda expression
------------------------------------------
	Runnable runnable=()-> 
				System.out.println("thread is started : "+Thread.currentThread().getName() );
			
		
		
		Thread thread=new Thread(runnable,"A");
		thread.start();
		
		//or
		
		Thread thread=new Thread(()-> 
		System.out.println("thread is started : "+Thread.currentThread().getName() ),"A");
		thread.start();
		


Need of synchronization in java
===============================


//consider 1 Printer --and -> Client1, 2 , 3

//we can have race condition



class Printer {
	public void print(String letter){
		
		//Critical section / CR
		System.out.print("[");
		
		try{
			Thread.sleep(1000);
		}catch(InterruptedException e){
			e.printStackTrace();
		}
		System.out.println( letter +"]");
	}
}

class Client extends Thread{
	
	private Printer printer;
	private String letter;
	
	public Client(Printer printer, String letter) {
		this.printer = printer;
		this.letter = letter;
		this.start();
	}

	public void run(){
		printer.print(letter);
	}
}

public class A_NeedOfSynchronized {
	public static void main(String[] args) {
		
		//1 printer shared bw 3 clients
		Printer printer=new Printer();
		Client c1=new Client(printer, "i love java");
		Client c2=new Client(printer, "i hate java");
		Client c3=new Client(printer, "i am joining another project");
		
		
		
	}

}


sol: use synchronized kb

how it synchronized works?
===========================

washroom analogy




synchronized block vs synchronized method
==============================================
class Printer {
	public synchronized void print(String letter){
		
		
		///
		//synchronized block vs synchronized method
		//synchronized block is better then synchronized method : performance
		
		//this refer to the current object Printer object act as a lock
		synchronized (this) {
			System.out.print("[");
			try{
				Thread.sleep(1000);
			}catch(InterruptedException e){
				e.printStackTrace();
			}
			System.out.println( letter +"]");
		}
		
		//
		//
	}
}





//this refer to the current object Printer object act as a lock

Q: can any object in java act as a lock
YES

class Printer {
	//any object in java can act as a lock
	private Object lock=new Object();
	
	public void print(String letter){
	
		///
		//synchronized block vs synchronized method
		//synchronized block is better then synchronized method : performance
		
		//this refer to the current object Printer object act as a lock
		synchronized (lock) {
			System.out.print("[");
			try{
				Thread.sleep(1000);
			}catch(InterruptedException e){
				e.printStackTrace();
			}
			System.out.println( letter +"]");
		}
		//
		//
	}
}


t1.yield();
----------------
is just a polite req from thread t1 to realease the cpu cycle..but it can be ignore by thread scheduler


thread priority : thread scheduler can ignore it


//What is volatile key word does?
=====================================
volatile vs synchronized


class Test extends Thread {

   volatile boolean keepRunning = true;

    public void run() {
        while (keepRunning) {
        }
        System.out.println("Thread terminated.");
    }

    public static void main(String[] args) throws InterruptedException {
        Test t = new Test();
        t.start();
        Thread.sleep(1000);
        t.keepRunning = false;
        System.out.println("keepRunning set to false.");
    }
}

How volatile work?
===================


program dont behave as expected :
-----------------------------------
class Test extends Thread {

    boolean keepRunning = true;

    public void run() {
        while (keepRunning) {
        }
        System.out.println("Thread terminated.");
    }

    public static void main(String[] args) throws InterruptedException {
        Test t = new Test();
        t.start();
        Thread.sleep(1000);
        t.keepRunning = false;
        System.out.println("keepRunning set to false.");
    }
}


program  behave as expected :
-----------------------------------

class Test extends Thread {

   volatile boolean keepRunning = true;

    public void run() {
    	
        while (keepRunning) {
        }
        
        System.out.println("Thread terminated.");
    }

    public static void main(String[] args) throws InterruptedException {
    	//2 threads : main and other is t
    	
        Test t = new Test();
        t.start();
        Thread.sleep(1000);
        t.keepRunning = false;
        System.out.println("keepRunning set to false.");
    }
}


volatile vs synchronized
=========================
which is better in performance: volatile kb
there are some use case for volitile

volatile kb is introduced in java 1.4
but it is not working correctly till java 1.5


volatile: visiblity problem

synchronized: thread safty as well as visiblity problem


Code is pushed to git repo

we will discuss doubts after break

I have a doubt as I already asked you, 
if we try to print something inside the while loop without
 using volatile keyword then during that time the test thread will
 read the value from the local cache and it 
 shouldn't print the thread terminated statement correct? 
 but why it's printing that statement

I'm bit confused here, 
I understood the concept but this one I confused, please do clarify this to me if possible



Dead lock threads :
---------------------------


public class E_DemoDeadLock {

	public static void main(String[] args) {

		final String r1 = "r1";
		final String r2 = "r2";

		Thread t1 = new Thread(new Runnable() {

			@Override
			public void run() {
				synchronized (r1) {
					System.out.println("t1 get lock on r1");
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
					}

					synchronized (r2) {
						System.out.println("t1 get lock on r2");
					}
				}
			}
		});

		Thread t2 = new Thread(new Runnable() {

			@Override
			public void run() {
				synchronized (r1) {
					System.out.println("t2 get lock on r1");
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
					}

					synchronized (r2) {
						System.out.println("t2 get lock on r2");
					}
				}
			}
		});
		
		t1.start();
		t2.start();
		
		System.out.println("----------------------");

	}

}



History of java concurrency*
---------------------------------

 java 1.4: classical concurrency
 java 1.5 or java 5: juc
 java 7: fork and join framework
 java 8: declartive data processing using stream, u also have || strams
 
 ...
 ....
 
 
 java 21: virtual threads
 
 lots of improvement is happening in java
 
 
BlockingQueue: can be used to imp P and C problem
===================================================

public class C_PCUsingBLQ {

	static BlockingQueue<Integer> queue = new ArrayBlockingQueue<>(1);

	public static void main(String[] args) {

		Thread t1 = new Thread(new Runnable() {
			@Override
			public void run() {
				try {
					produce();
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
		});

		Thread t2 = new Thread(new Runnable() {
			@Override
			public void run() {
				try {
					consume();
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
		});
		
		t1.start();
		t2.start();

	}

	static void consume() throws InterruptedException {
		while (true) {
			Thread.sleep(1000);
			Integer value = queue.take();
			System.out.println("taken: " + value + " size : " + queue.size());
		}
	}

	static void produce() throws InterruptedException {
		Random r = new Random();
		while (true) {
			int data=r.nextInt(10);
			System.out.println("put : "+ data);
			queue.put(data);
		}
	}

}


What is the problem with Runnable?
=================================
run() dont return anything
it can not throw ex, ex handling in a thread become more compileated in Runnable






Q: How to handle a excetion that is thrown from run() method
---------------------------------------------------------------
1. run can not throw the checked ex
	TRICK: u need to wrap ur ex to runtime ex and throw it (Ex wrapping and rethrowing)
	

//run: it can not return the processing result
//run method can not throw the exception

class MyJob implements Runnable {

	@Override
	public void run() {
		try {
			BufferedReader br = new BufferedReader(new FileReader("foo.txt"));
			//
			System.out.println("file is found");
		} catch (FileNotFoundException ex) {
			System.out.println("file is not found");
			throw new RuntimeException(ex);
		}
	}
}

class MyExHandler implements UncaughtExceptionHandler {
	@Override
	public void uncaughtException(Thread t, Throwable e) {
		System.out.println("exception is handled :" + e.getCause());
	}
}

class CommonExHandler implements UncaughtExceptionHandler {
	@Override
	public void uncaughtException(Thread t, Throwable e) {
		System.out.println("common exception is handled :" + e.getCause());
	}
}


public class C_ProblemWithRunnable_HandlingEx {

	public static void main(String[] args) {
		// U need to create exception handler in java to handle ex from a
		// threads

		Thread.setDefaultUncaughtExceptionHandler(new CommonExHandler());
		MyJob job = new MyJob();

		Thread thread = new Thread(job);
		//thread.setUncaughtExceptionHandler(new MyExHandler());
		thread.start();

	}

}



Q2. How to return processing result from run()
----------------------------------------------
