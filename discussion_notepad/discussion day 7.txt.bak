
Day 6:
-----------
Quick recap most imp topics so far

* Interface and abstract class, run time polymorphism
* Excption handling
* collection


Main topic:
-----------------

* java generics 
* java threads



What is the need of generics?
-------------------------
/*
		 * provide type safty to ur code
		 * generics is compile time safty net
		 */
		 
		 
		 
		
<? extends Number >
	========================
import java.util.*;
public class A_NeedOfGenerics {
	
	public static void main(String[] args) {

//		List list=new LinkedList();
//		list.add(12);
//		list.add(55);
//		list.add("bar"); //hetrogenious ds
		
//		int sum=0;
//		
//		for(Object o: list){
//			sum+=(Integer)o;
//		}
//	
//		System.out.println(sum);
		
		
	
		List<Integer> list=new LinkedList<>();
		list.add(12);
		list.add(102);
		list.add(122);
		list.add(912);
		
		printList(list);
		

		List<Double> list2=new LinkedList<>();
		list2.add(12.00);
		list2.add(102.7);
		list2.add(122.8);
		list2.add(912.3);
		
		printList(list2);
		
	}

	//? extends xxx
	//? super xxx
	private static void printList(List<? extends Number > list) {
		for(Number val: list){
			System.out.println(val);
		}
	}
	
	

}


	//it means that i saying to compiler that i can pass any list whose member are inherted 
	//from Object (ie like mother class in java) ie means this method can print any kind of list
		// u can only print the collection but u can not change it
		
	private static void printList(List<? extends Object > list) {
		//list.add(55.00); invalid operateion
		for(Object val: list){
			System.out.println(val);
		}
	}
	
	
		private static void printList(List<?> list) {
		//list.add(55.00); invalid operateion
		for(Object val: list){
			System.out.println(val);
		}
	}



generics class in java
======================

//what is the need of generics class in java
//if my algo is same only data type is changing i can go for template / generic class


class Box<T>{
	private T data;
	public T getData() {
		return data;
	}
	public void setData(T data) {
		this.data = data;
	}
}
public class C_TemplateClassInJava {
	
	public static void main(String[] args) {
		Box<Integer> b=new Box<>();
		b.setData(33);
		System.out.println(b.getData());
		
		Box<String> boxName=new Box<>();
		boxName.setData("rajiv");
		System.out.println(boxName.getData());
	}

}


Generic class : real life example:
===============================
while creating my own Stack i want to support various data type but 
i dont want to create multiple version of same calss

==> template class


import java.lang.reflect.Array;

class StackEmptyEx extends RuntimeException{

	public StackEmptyEx(String message) {
		super(message);
	}
}

class StackFullEx extends RuntimeException{

	public StackFullEx(String message) {
		super(message);
	}
}
class Stack<T> {

	private T arr[];
	private int top;
	private final int SIZE=5;
	
	public Stack(Class<T>clazz, int cap){
		arr=(T[])Array.newInstance(clazz, cap);//code of java reflection * core java topics
		//mokito, hib, spring boot => 
		top=-1;
	}
	
	public void push(T data) {
		if(top==SIZE-1){
			throw new StackFullEx("stack is full");
		}
		arr[++top]=data;
	}

	public T pop() {
		if(top==-1){
			throw new StackEmptyEx("stack is empty");
		}
		return arr[top--];
	}
}

public class D_StackInJava {

	public static void main(String[] args) {

		Stack<String> s=new Stack<>(String.class, 5);
		s.push("foo");
		s.push("bar");
		s.push("jar");
		s.push("car");
		s.push("apple");
		
		System.out.println(s.pop());
		System.out.println(s.pop());
		System.out.println(s.pop());
		
		System.out.println(s.pop());
		System.out.println(s.pop());
		
		
		
//		Stack<Integer> s=new Stack<>(Integer.class, 5);
//		s.push(1);
//		s.push(2);
//		s.push(3);
//		s.push(4);
//		s.push(5);
//		
//		System.out.println(s.pop());
//		System.out.println(s.pop());
//		System.out.println(s.pop());
//		
//		System.out.println(s.pop());
//		System.out.println(s.pop());
		
		
		
		
		
	}

}


Generic method
===============

//generic method
public class D_GenericMethod {
	
	public static void main(String[] args) {
		
		Integer a=3;
		Integer b=2;
		Integer c=41;
		
		Integer max=maxData(a, b , c);
		System.out.println(max);
		
	}

	private static Integer maxData(Integer a, Integer b, Integer c) {
		Integer max=a;
		if(b>max)
			max=b;
		if(c>max)
			max=c;
		return max;
	}

}




//generic method
public class D_GenericMethod {
	
	public static void main(String[] args) {
		
//		Integer a=3;
//		Integer b=2;
//		Integer c=41;
//		
//		Integer max=maxData(a, b , c);
//		System.out.println(max);
		
		Double a=3.0;
		Double b=2.6;
		Double c=41.4;
		
		Double max=maxData(a, b , c);
		System.out.println(max);
		
		Employee e1=new Employee(123,	"zen", "delhi", 45000.00);
		Employee e2= new Employee(13,	"sumit", "noida", 42000.00);
		Employee e3= new Employee(93,	"sumit", "banglore", 49000.00);
		
		Employee employeeMax=maxData(e1, e2, e3);
		System.out.println(employeeMax);
	}
	//T must be something that implement/extends Comparable
	private static  <T extends Comparable<T>> T  maxData(T a, T b, T c) {
		T max=a;
		if(b.compareTo(max)>0)
			max=b;
		if(c.compareTo(max)>0)
			max=c;
		return max;
	}

}


Annotations: aka meta data ie data about data
========================================

/*
 * java inbuild annotation
 * 	@Override
 *  @Suppressedwaring
 *  @FuncationalInterface
 *  @Deprecated
 *  
 * java custom annotation used by various fraemwroks
 * 
 */

class Foo{
	public void foof(){
		System.out.println("foof method of class Foo");
	}
	@Deprecated
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public void myOldApi(){
		System.out.println("in 2007 ...");
		
		List list=new ArrayList();
		list.add("foo");
		
	}
}
class Bar extends Foo{
	
	@Override 
	//telling to the compiler to ensure that below method is also a part of parent class
	//we want to override it
	public void foof(){
		System.out.println("foof method of class Foo is overriden");
	}
	public void myNewApi(){
		System.out.println("in 2021 ...");
	}
}

public class A_NeedOfAnnotation {
	
	public static void main(String[] args) {
		Bar foo=new Bar();
		foo.foof();
		foo.myOldApi();
		foo.myNewApi();
	}

}

how to create custom annotation?
================================
user defne anntations


/*
 * java custom annotation used by various fraemwroks
 */

//step 1: write a custom annotion 

@Target({ElementType.METHOD, ElementType.TYPE})// where to apply this annotation
@Retention(RetentionPolicy.RUNTIME)
@interface MyAnno{
	public String hello() default "hello";
}


class Foof{
	

	//step 2: apply this annottaion somewhere 

	@MyAnno(hello="all java champs")
	public void foof(){
		System.out.println("hello to foof method");
	}
}
public class B_CustomAnnotation {
	
	public static void main(String[] args) {
		
		//step 3: process that annotation using java reflection core java:
		//it is used by various framework to know about meta data of ur class
		Foof f=new Foof();
		f.foof();
	}

}


java reflection
===============

What is java reflection?
how it is useful to me?
how any fraemwroks work in java?



Java reflection and why i should care about it?
---------------------------------------------------

Reflection is a feature in the Java programming language
. It allows an executing Java program to examine or "introspect" upon itself,
 and manipulate internal properties of the program.
 For example,
 it's possible for a Java class to obtain the names of all its members and display them.
 
 
 Class is like a Cookie cutter 
========================================
Class is a class in java that act as a janam
parti
 that can be used a programmer to know 
inforation about meta data of a class a run
time




==> java reflecation
=======================


import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;

interface Payable{
	public void pay();
}
class Emp implements Payable{
	private int id;
	private String name;
	@Override
	public void pay() {
		System.out.println("pay is proivded...");
	}
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public Emp(int id, String name) {
		super();
		this.id = id;
		this.name = name;
	}
	
	
	
}
public class A_HelloReflection {

	public static void main(String[] args) throws ClassNotFoundException {
		
		//static class loading
		//Emp e=new Emp(1, "raj");
		
		//dynamic class loading in java (imp) all the framework use this conept to run ur code
		
		Class<?> clazz=Class.forName("com.day6.session1.reflection.Emp");
		//this can give me all the meta data about the class
		
//		Method[]methods=clazz.getMethods();
//		for(Method m: methods){
//			System.out.println(m.getName()+" : "+Modifier.toString( m.getModifiers())+" : "+ m.getParameterCount());
//		}
		
		Method[]methods=clazz.getDeclaredMethods();
		for(Method m: methods){
			System.out.println(m.getName()+" : "+Modifier.toString( m.getModifiers())
					+" : "+ m.getParameterCount());
		}
		
		Constructor[]constructors=clazz.getConstructors();
		
		
	}
}



Using reflecation u can even call a private ctr
=================================================================



//can be call a private ctr out side the class
class MyClass{
	//only one
	private MyClass() {
		System.out.println("dare to call me");
	}
	public void doWork(){
		System.out.println("doing work");
	}
}

public class PrivateCtr {

	
	public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
		
		//java reflection can even allow u to call a private method / ctr
		//java ref can break the encapuslation TRUE
		
		Class<?> clazz=
				Class.forName("com.day6.session1.reflection.MyClass");
		
		Constructor[]constructors=clazz.getDeclaredConstructors();
		constructors[0].setAccessible(true);// even if ctr is private i dont care about it i want to call that
	
		MyClass c1=(MyClass) constructors[0].newInstance();
		
		c1.doWork();
	
	}
}






Using reflecation u can even call a private method
===================================================


class Foo{
	public String welcome(String name) {
		return "welcome " + name;
	}
}
public class CallingAPrivateMethod {
	
	public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException, SecurityException, InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
		
		Class class1=Class.forName("com.day9.session1.reflection.Foo");
		//
		Method method=class1.getMethod("welcome", String.class);
		
		Object ob=class1.newInstance();
		
		String output= (String) method.invoke(ob, "raj");
		
		System.out.println(output);
		
//		Foo f=new Foo();
		
//		System.out.println(f.welcome("raj"));
	}

}

