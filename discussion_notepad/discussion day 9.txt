
Day 9:
------
good morning all :)

let wait for others for 2min before we start

-------
agenda :
--------
* SOLID
* GOF desing patterns
* java io, serilization
* Network programming socket programming and RMI



SOLID and GOF patterns
=======================

S: SRP
O: OCP
L: LSP
I: ISP
D: DIP



Design pattern:
proven way of doing thing

GOF pattern
	23 patterns


3 cat:
1. creational
2. structural 
3. behavioural patterns

10


MVC: SRP
there should be not more then one reasion to change ur code

M		V		C
model 		view 		controller

BL		display		manage the flow

	
	
	
1. singleton pattern:

only object per application
how to ensure it
	
	/*
 	" one object per application" ex logging , db connection etc

	=> lazy vs eager
	=> threading issue, double locking
	=> What if clonned
	=> What if deserilized?
	=> What if used java reflection?
	=> what if 2 class loader load that class twice
	=> best practices, effective java
	=> using enum
 */
final public class Singleton {

}




Attempts:1 
===============

final public class Singleton {
	private static Singleton singleton=new Singleton();
	
	private Singleton(){}
	
	
	public static Singleton getSingleton(){
		return singleton;
	}

}



Attempts:2: lazy init....but u have now concurrency issues

===============

final public class Singleton {
	//Lazy vs eager initilization
	private static Singleton singleton=null;
	
	private Singleton(){}
	
	
	public static Singleton getSingleton(){
		if(singleton==null)
			singleton=new Singleton();
		return singleton;
	}

}


Attempts:3: u put synchronized now : performance ... 
===============

final public class Singleton {
	//Lazy vs eager initilization
	private static Singleton singleton=null;
	
	private Singleton(){}
	
	
	//t1 t2
	public synchronized static Singleton getSingleton(){
		if(singleton==null)
			singleton=new Singleton();
		return singleton;
	}
}


synchronized method vs synchronized block
=======================================


Attempts:4: u  apply  double lock checking concept ==> broken :(
===============


final public class Singleton {
	//Lazy vs eager initilization
	private static Singleton singleton=null;
	
	private Singleton(){}
	
	
	//this code can still have race condition=> double lock checking concept?
	//t1 			t2
	public static Singleton getSingleton(){
		
		if(singleton==null){
			synchronized(Singleton.class){
				if(singleton==null){
					singleton=new Singleton();
				}
			}
		}
		
		return singleton;
	}
}



singleton=new Singleton();
it happen in 3 steps:

1. construct the empty object

2. call the ctr (actually initilate right values)

3. assign value to LHS
	
	
	

1. construct the empty object

2. assign value to LHS

3. call the ctr (actually initilate right values)


	
	
final public class Singleton {
	//Lazy vs eager initilization
	private volatile  static Singleton singleton=null;
	
	private Singleton(){}
	
	
	//visiblity problem of "singleton" variable
	
	//this code can still have race condition=> double lock checking concept?
	//t1 			t2
	public static Singleton getSingleton(){
		
		if(singleton==null){
			synchronized(Singleton.class){
				if(singleton==null){
					singleton=new Singleton();
				}
			}
		}
		
		return singleton;
	}
}

Now concurrencry issues are solved....


What if somebody do clonning of my singleton : broken :(



final public class Singleton implements Cloneable{
	//Lazy vs eager initilization
	
	private volatile  static Singleton singleton=null;
	
	@Override
	protected Object clone() throws CloneNotSupportedException {
		return super.clone();
	}

	private Singleton(){}
	
	//visiblity problem of "singleton" variable
	
	//this code can still have race condition=> double lock checking concept?
	//t1 			t2
	public static Singleton getSingleton(){
		
		if(singleton==null){
			synchronized(Singleton.class){
				if(singleton==null){
					singleton=new Singleton();
				}
			}
		}
		
		return singleton;
	}
}







		Singleton singleton=Singleton.getSingleton();
		System.out.println(singleton.hashCode());
		

		Singleton singleton2=(Singleton) singleton.clone();
		System.out.println(singleton2.hashCode());
		
		
		
OP:
	
366712642
1829164700


How to fix it?
----------------
return the same object?
	
	@Override
	protected Object clone() throws CloneNotSupportedException {
		return singleton;
	}
	


What happen if somebody to seriization?



	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
